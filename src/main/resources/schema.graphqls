type Query {
    authors: [Author]
    books: [Book]
    book(id: ID): Book
    booksWithFilter(filters: BookFilter, pagination: Pagination): [Book]
    booksAggregator(filters: BookFilter, aggregation:AggregationInput): Float
    heroes: [Hero]

    # Interface
    items: [Item]
    item(id: ID!): Item

    # Union
    inventory: [AllItems]
    inventoryItem(id: ID!): [AllItems]
}

type Mutation {
    createBook(filters: CreateBookPayloadInput): Book
    updateBook(filters: UpdateBookPayloadInput): Book
    deleteBook(filters: DeleteBookPayloadInput): Book
}

union AllItems = Book | Author

interface Item {
    id: ID
    title: String
}

type Hero {
    name: String!
    friends: [Hero]
}

type Book implements Item{
    id: ID
    description: String
    title: String
    price: Int
    authorId: Int
    author: Author!
    countryOfOrigin: String
    publisher: String
    contact: String
    numOfPages: Int
    additionalDetails: AdditionalDetails
    _allow_: String
}

type AdditionalDetails {
    stockAvailable: Int
    copiesSold: Int
    yearPublished: Int
}

input CreateBookPayloadInput {
    title: String!
    description: String!
    price: Int
    authorId: Int!
    countryOfOrigin: String
    publisher: String
    contact: String
}

input UpdateBookPayloadInput {
    id: ID!
    title: String
    description: String
    price: Int
    authorId: Int
    countryOfOrigin: String
    publisher: String
    contact: String
}

input DeleteBookPayloadInput {
    id: ID!
}

type Author implements Item {
    id: ID
    title: String
    age: Int
    books: [Book]
}

input BookFilter {
    priceEq: Int
    priceGt: Int
    priceGe: Int
    priceLt: Int
    priceLe: Int
}

input Pagination {
    limit: Int
    offset: Int
}

enum SortTypeEnum {
    DESC
    ASC
}

input SortByInput {
    type: SortTypeEnum
    field: String
}

enum AggregationEnum {
    COUNT
    SUM
    MIN
    MAX
    AVERAGE
}

input AggregationInput {
    type: AggregationEnum
    field: String
}

